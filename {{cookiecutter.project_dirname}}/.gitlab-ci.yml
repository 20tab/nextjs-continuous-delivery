stages:
  - Test
  - Pact-publish
  - Pact-check
  - Build
  - Report
  - Deploy
  - Pact-tag
  - Sentry

variables:
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
  PACT_CONSUMER_NAME: {{ cookiecutter.project_slug }}-{{ cookiecutter.service_slug }}
  SENTRY_PROJECT_NAME: {{ cookiecutter.project_slug }}-{{ cookiecutter.service_slug }}
  VERSION_BEFORE_REF: $CI_COMMIT_BEFORE_SHA
  VERSION_REF: $CI_COMMIT_SHA

cache:
  paths:
    - node_modules/
    - .yarn

sentry_release:
  stage: .pre
  image: docker:20
  services:
    - docker:20-dind
  rules:
    - if: $SENTRY_DSN && ($CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG)
  script:
    - RELEASE_START=$(date +%s)
    - >
      docker run --rm
      -v ${PWD}:${PWD}
      -w ${PWD}
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sh -c
      "sentry-cli releases new $VERSION_REF -p $SENTRY_PROJECT_NAME --log-level=debug;
      sentry-cli releases set-commits $VERSION_REF --auto;
      sentry-cli releases finalize $VERSION_REF"

test:
  stage: Test
  image: docker:20
  services:
    - docker:20-dind
  needs: []
  variables:
    SERVICE_IMAGE_NAME: "gitlabci_{{ cookiecutter.project_slug }}_{{ cookiecutter.service_slug }}"
    SERVICE_IMAGE_TAG: "$CI_JOB_NAME-$CI_JOB_ID"
    SERVICE_CONTAINER_NAME: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}_frontend"
  script:
    - >
      docker build
      --tag=$SERVICE_IMAGE_NAME:$SERVICE_IMAGE_TAG
      --file=docker/remote.Dockerfile
      --target=test .
    - docker run --name=$SERVICE_CONTAINER_NAME $SERVICE_IMAGE_NAME:$SERVICE_IMAGE_TAG
    - docker cp $SERVICE_CONTAINER_NAME:/app/coverage .
    - docker cp $SERVICE_CONTAINER_NAME:/app/junit.xml ./junit.xml
    - if [ "$PACT_ENABLED" == true ]; then docker cp $SERVICE_CONTAINER_NAME:/app/pacts .; fi
  after_script:
    - docker stop $SERVICE_CONTAINER_NAME
    - docker container rm $SERVICE_CONTAINER_NAME
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths:
      - coverage
      - pacts
    reports:
      junit:
      - junit.xml
    expire_in: 1 day
    when: always

publish:
  stage: Pact-publish
  image:
    name: docker:20
  services:
    - docker:20-dind
  needs: ["test"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $PACT_ENABLED == "true"
  before_script:
    - if [ "$CI_COMMIT_BRANCH" ]; then PACT_CONSUMER_TAG="branch:$CI_COMMIT_BRANCH"; else PACT_CONSUMER_TAG="tag:$CI_COMMIT_TAG"; fi
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      -v $PWD/pacts:/pacts
      pactfoundation/pact-cli:latest-node14 pact-broker publish /pacts
      --consumer-app-version=$VERSION_REF
      --tag=$PACT_CONSUMER_TAG

pages:
  stage: Report
  image: busybox
  needs: ["test"]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - mv coverage/tests/lcov-report/* public
  artifacts:
    paths:
      - public

.can-i-deploy:
  stage: Pact-check
  allow_failure: false
  image:
    name: docker:20
  services:
    - docker:20-dind
  needs: ["publish"]
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker can-i-deploy
      --pacticipant $PACT_CONSUMER_NAME
      --version $VERSION_REF
      --to "env:$DEPLOY_ENV"

can-i-deploy_development:
  extends: .can-i-deploy
  rules:
    - if: $PACT_ENABLED == "true" && $CI_COMMIT_BRANCH == "develop"
      variables:
        DEPLOY_ENV: development

can-i-deploy_staging:
  extends: .can-i-deploy
  rules:
    - if: $PACT_ENABLED == "true" && $CI_COMMIT_BRANCH == "main"
      variables:
        DEPLOY_ENV: staging

can-i-deploy_production:
  extends: .can-i-deploy
  rules:
    - if: $PACT_ENABLED == "true" && $CI_COMMIT_TAG
      variables:
        DEPLOY_ENV: production

.build:
  stage: Build
  image: docker:20
  services:
    - docker:20-dind
  before_script:
    - export DOCKER_CONFIG=$PWD/.dockerconfig
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - >
      docker build
      --tag=$CI_REGISTRY/$CI_PROJECT_PATH:$VERSION_REF
      --file=docker/remote.Dockerfile
      --target=remote
      --pull .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:$VERSION_REF
  after_script:
    - docker logout $CI_REGISTRY

build_development:
  extends: .build
  needs:
    - job: can-i-deploy_development
      optional: true
    - job: test
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

build_staging:
  extends: .build
  needs:
    - job: can-i-deploy_staging
      optional: true
    - job: test
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

build_production:
  extends: .build
  needs:
    - job: can-i-deploy_production
      optional: true
    - job: test
  rules:
    - if: $CI_COMMIT_TAG

.development:
  environment:
    name: development
    url: {{ cookiecutter.project_url_dev }}

.staging:
  environment:
    name: staging
    url: {{ cookiecutter.project_url_stage }}

.production:
  environment:
    name: production
    url:  {{ cookiecutter.project_url_prod }}

.deploy:
  stage: Deploy
  image:
    name: docker:20
  services:
    - docker:20-dind
  before_script:
    - export TF_VAR_service_container_image=${CI_REGISTRY_IMAGE}:${VERSION_REF}
  script:
    - >
      docker run --rm
      -u `id -u`
      -v ${PWD}:${PWD}
      -w ${PWD}{% if cookiecutter.terraform_backend == "gitlab" %}
      -e CI_API_V4_URL
      -e CI_COMMIT_SHA
      -e CI_JOB_ID{% if cookiecutter.vault_project_path %}
      -e CI_JOB_JWT_V2{% endif %}
      -e CI_JOB_STAGE
      -e CI_JOB_TOKEN
      -e CI_PROJECT_ID
      -e CI_PROJECT_NAME
      -e CI_PROJECT_NAMESPACE
      -e CI_PROJECT_PATH
      -e CI_PROJECT_URL{% elif cookiecutter.vault_project_path %}
      -e CI_JOB_JWT_V2{% endif %}
      -e ENV_SLUG
      -e PROJECT_DIR=${CI_PROJECT_DIR}
      -e PROJECT_SLUG={{ cookiecutter.project_slug }}
      -e TERRAFORM_BACKEND={{ cookiecutter.terraform_backend }}
      -e TERRAFORM_EXTRA_VAR_FILE=${ENVIRONMENT_SLUG}.tfvars
      -e TERRAFORM_VARS_DIR=${CI_PROJECT_DIR}/terraform/vars{% if cookiecutter.terraform_backend == "gitlab" %}
      -e TF_ROOT=${CI_PROJECT_DIR}/terraform/{{ cookiecutter.deployment_type }}{% if cookiecutter.terraform_backend == "gitlab" %}
      -e TF_STATE_NAME=env_${ENVIRONMENT_SLUG}{% endif %}
      {% if cookiecutter.deployment_type == "digitalocean-k8s" %}
      -e TF_VAR_digitalocean_token="${DIGITALOCEAN_TOKEN}"{% endif %}
      -e TF_VAR_internal_backend_url="${INTERNAL_BACKEND_URL}"
      -e TF_VAR_internal_service_port="${FRONTEND_SERVICE_PORT}"{% if cookiecutter.deployment_type == "other-k8s" %}
      -e TF_VAR_kubernetes_cluster_ca_certificate="${KUBERNETES_CLUSTER_CA_CERTIFICATE}"
      -e TF_VAR_kubernetes_host="${KUBERNETES_HOST}"
      -e TF_VAR_kubernetes_token="${KUBERNETES_TOKEN}"{% endif %}
      -e TF_VAR_project_url="${CI_ENVIRONMENT_URL}"
      -e TF_VAR_sentry_dsn="${SENTRY_DSN}"
      -e TF_VAR_service_container_image
      -e TF_VAR_service_slug="{{ cookiecutter.service_slug }}"{% if cookiecutter.terraform_backend != "gitlab" %}
      -e TF_WORKSPACE="{{ cookiecutter.project_slug }}_frontend_environment_${ENVIRONMENT_SLUG}"{% endif %}{% if cookiecutter.terraform_backend == "terraform-cloud" and not cookiecutter.vault_project_path %}
      -e TFC_TOKEN{% endif %}{% if cookiecutter.vault_project_path %}
      -e VAULT_ADDR
      -e VAULT_ENV_SECRETS="sentry"
      -e VAULT_PROJECT_PATH="{{ cookiecutter.vault_project_path }}"
      -e VAULT_STACK_SECRETS="digitalocean k8s"
      -e VAULT_VERSION{% endif %}
      registry.gitlab.com/gitlab-org/terraform-images/stable:latest ./scripts/deploy.sh
  artifacts:
    name: plan
    reports:
      terraform: ${TF_ROOT}/plan.json

deploy_development:
  extends:
    - .development
    - .deploy
  needs: ["build_development"]
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      variables:
        ENVIRONMENT_SLUG: dev
        STACK_SLUG: "${STACK_SLUG_DEV}"

deploy_staging:
  extends:
    - .staging
    - .deploy
  needs: ["build_staging"]
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      variables:
        ENVIRONMENT_SLUG: stage
        STACK_SLUG: "${STACK_SLUG_STAGE}"

deploy_production:
  extends:
    - .production
    - .deploy
  needs: ["build_production"]
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        ENVIRONMENT_SLUG: prod
        STACK_SLUG: "${STACK_SLUG_PROD}"

.rollback:
  extends: .deploy
  before_script:
    - export TF_VAR_service_container_image=${CI_REGISTRY_IMAGE}:${VERSION_BEFORE_REF}

rollback_development:
  extends:
    - .development
    - .rollback
  needs: ["deploy_development"]
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: manual
      allow_failure: true

rollback_staging:
  extends:
    - .staging
    - .rollback
  needs: ["deploy_staging"]
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: true

rollback_production:
  extends:
    - .production
    - .rollback
  needs: ["deploy_production"]
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: true

.create-version-tag:
  image:
    name: docker:20
  services:
    - docker:20-dind
  stage: Pact-tag

create-version-tag_development:
  extends: .create-version-tag
  needs: ["deploy_development"]
  rules:
    - if: $PACT_ENABLED == "true" && $CI_COMMIT_BRANCH == "develop"
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker create-version-tag
      --pacticipant $PACT_CONSUMER_NAME
      --version $VERSION_REF
      --tag "env:development"

create-version-tag_staging:
  extends: .create-version-tag
  needs: ["deploy_staging"]
  rules:
    - if: $PACT_ENABLED == "true" && $CI_COMMIT_BRANCH == "main"
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker create-version-tag
      --pacticipant $PACT_CONSUMER_NAME
      --version $VERSION_REF
      --tag "env:staging"

create-version-tag_production:
  extends: .create-version-tag
  needs: ["deploy_production"]
  rules:
    - if: $PACT_ENABLED == "true" && $CI_COMMIT_TAG
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker create-version-tag
      --pacticipant $PACT_CONSUMER_NAME
      --version $VERSION_REF
      --tag "env:production"

.sentry_deploy_success:
  stage: Sentry
  image: docker:20
  services:
    - docker:20-dind
  script:
    - RELEASE_END=$(date +%s)
    - >
      docker run --rm
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sentry-cli releases deploys $VERSION_REF new -e $SENTRY_ENV -t $((RELEASE_END-RELEASE_START))

sentry_success_development:
  extends: .sentry_deploy_success
  needs: ["deploy_development"]
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "develop"
      when: on_success
      variables:
        SENTRY_ENV: development

sentry_success_staging:
  extends: .sentry_deploy_success
  needs: ["deploy_staging"]
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "main"
      when: on_success
      variables:
        SENTRY_ENV: staging

sentry_success_production:
  extends: .sentry_deploy_success
  needs: ["deploy_production"]
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_TAG
      when: on_success
      variables:
        SENTRY_ENV: production

.sentry_deploy_failure:
  stage: Sentry
  image: docker:20
  services:
    - docker:20-dind
  script:
    - >
      docker run --rm
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sentry-cli send-event -m "Deploy to $SENTRY_ENV failed."

sentry_failure_development:
  extends: .sentry_deploy_failure
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "develop"
      when: on_failure
      variables:
        SENTRY_ENV: development

sentry_failure_staging:
  extends: .sentry_deploy_failure
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "main"
      when: on_failure
      variables:
        SENTRY_ENV: staging

sentry_failure_production:
  extends: .sentry_deploy_failure
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_TAG
      when: on_failure
      variables:
        SENTRY_ENV: production
