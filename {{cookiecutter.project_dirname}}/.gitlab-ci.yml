stages:
  - Test
  - Pact-publish
  - Report
  - Pact-check
  - Build
  - Deploy
  - Pact-tag
  - Sentry

variables:
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
  PACT_CONSUMER_NAME: {{ cookiecutter.project_slug }}-{{ cookiecutter.service_slug }}
  SENTRY_ORG: $SENTRY_ORG
  SENTRY_PROJECT_NAME: {{ cookiecutter.project_slug }}-{{ cookiecutter.service_slug }}
  SENTRY_URL:  $SENTRY_URL
  VERSION_BEFORE_REF: $CI_COMMIT_BEFORE_SHA
  VERSION_REF: $CI_COMMIT_SHA

cache:
  paths:
    - node_modules/
    - .yarn

sentry_release:
  stage: .pre
  image: docker:20
  services:
    - docker:20-dind
  rules:
    - if: $SENTRY_DSN && ($CI_COMMIT_BRANCH == "develop" ||  $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_TAG) && $CI_JOB_TRIGGERED != "true"
  script:
    - RELEASE_START=$(date +%s)
    - >
      docker run --rm
      -v ${PWD}:${PWD}
      -w ${PWD}
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sh -c
      "sentry-cli releases new $VERSION_REF -p $SENTRY_PROJECT_NAME --log-level=debug;
      sentry-cli releases set-commits $VERSION_REF --auto;
      sentry-cli releases finalize $VERSION_REF"

test:
  stage: Test
  image: docker:20
  services:
    - docker:20-dind
  variables:
    SERVICE_IMAGE_NAME: "gitlabci_{{ cookiecutter.project_slug }}_{{ cookiecutter.service_slug }}"
    SERVICE_IMAGE_TAG: "$CI_JOB_NAME-$CI_JOB_ID"
    SERVICE_CONTAINER_NAME: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}_{{ cookiecutter.service_slug }}"
  script:
    - echo $CI_COMMIT_TAG $CI_COMMIT_BRANCH
    - >
      docker build
      --tag=$SERVICE_IMAGE_NAME:$SERVICE_IMAGE_TAG
      --file=docker/remote.Dockerfile
      --target=test .
    - docker run --name=$SERVICE_CONTAINER_NAME $SERVICE_IMAGE_NAME:$SERVICE_IMAGE_TAG
    - docker cp $SERVICE_CONTAINER_NAME:/temp/coverage .
    - if [ "$PACT_ENABLED" == true ]; then docker cp $SERVICE_CONTAINER_NAME:/temp/__tests__/pacts .; fi
  after_script:
    - docker stop $SERVICE_CONTAINER_NAME
    - docker container rm $SERVICE_CONTAINER_NAME
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths:
      - coverage
      - pacts
    expire_in: 1 day

publish:
  stage: Pact-publish
  image:
    name: docker:20
  services:
    - docker:20-dind
  rules:
    - if: $PACT_ENABLED == "true" && $PACT_BROKER_BASE_URL
  before_script:
    - if [ "$CI_COMMIT_BRANCH" ]; then PACT_CONSUMER_TAG="branch:$CI_COMMIT_BRANCH"; else PACT_CONSUMER_TAG="tag:$CI_COMMIT_TAG"; fi
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      -v $PWD/pacts:/pacts
      pactfoundation/pact-cli:latest-node14 pact-broker publish /pacts
      --consumer-app-version=$VERSION_REF
      --tag=$PACT_CONSUMER_TAG
  dependencies:
    - test

pages:
  stage: Report
  image: busybox
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - mv coverage/lcov-report/* public
  artifacts:
    paths:
      - public

.can-i-deploy:
  stage: Pact-check
  allow_failure: false
  dependencies:
    - publish
  image:
    name: docker:20
  services:
    - docker:20-dind
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker can-i-deploy
      --pacticipant $PACT_CONSUMER_NAME
      --version $VERSION_REF
      --to "env:$DEPLOY_ENV"

can-i-deploy_development:
  extends: .can-i-deploy
  rules:
    - if: $PACT_ENABLED == "true" && $PACT_BROKER_BASE_URL && $CI_COMMIT_BRANCH == "develop" && $CI_JOB_TRIGGERED != "true"
      variables:
        DEPLOY_ENV: development

can-i-deploy_staging:
  extends: .can-i-deploy
  rules:
    - if: $PACT_ENABLED == "true" && $PACT_BROKER_BASE_URL && $CI_COMMIT_BRANCH == "master" && $CI_JOB_TRIGGERED != "true"
      variables:
        DEPLOY_ENV: staging

can-i-deploy_production:
  extends: .can-i-deploy
  rules:
    - if: $PACT_ENABLED == "true" && $PACT_BROKER_BASE_URL && $CI_COMMIT_TAG && $CI_JOB_TRIGGERED != "true"
      variables:
        DEPLOY_ENV: production

build:
  stage: Build
  image: docker:20
  services:
    - docker:20-dind
  before_script:
    - export DOCKER_CONFIG=$PWD/.dockerconfig
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - >
      docker build
      --tag=$CI_REGISTRY/$CI_PROJECT_PATH:$VERSION_REF
      --file=docker/remote.Dockerfile
      --target=remote
      --build-arg SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN
      --build-arg SENTRY_DSN=$SENTRY_DSN
      --build-arg SENTRY_ORG=$SENTRY_ORG
      --build-arg SENTRY_URL=$SENTRY_URL
      --pull .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:$VERSION_REF
  after_script:
    - docker logout $CI_REGISTRY
  rules:
    - if: ($CI_COMMIT_BRANCH == "develop" ||  $CI_COMMIT_BRANCH == "master" ||  $CI_COMMIT_TAG) && $CI_JOB_TRIGGERED != "true"

.development:
  environment:
    name: Development
    url: {{ cookiecutter.project_url_dev }}
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" && $CI_JOB_TRIGGERED != "true"
      variables:
        ENVIRONMENT_SLUG: dev


.staging:
  environment:
    name: Staging
    url: {{ cookiecutter.project_url_stage }}
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_JOB_TRIGGERED != "true"
      variables:
        ENVIRONMENT_SLUG: stage

.production:
  environment:
    name: Production
    url:  {{ cookiecutter.project_url_prod }}
  rules:
    - if: $CI_COMMIT_TAG && $CI_JOB_TRIGGERED != "true"
      variables:
        ENVIRONMENT_SLUG: prod

.deploy:
  stage: Deploy
  image:
    name: docker:20
  services:
    - docker:20-dind
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/terraform
  before_script:
    - export TF_VAR_service_container_image=${CI_REGISTRY_IMAGE}:${VERSION_REF}
  script:
    - >
      docker run --rm
      -u `id -u`
      -v ${KUBECONFIG}:${KUBECONFIG}
      -v ${PWD}:${PWD}
      -w ${PWD}
      -e CI_JOB_TOKEN
      -e KUBE_CONFIG_PATH="${KUBECONFIG}"
      -e TF_ADDRESS=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/{{ cookiecutter.project_slug }}-${ENVIRONMENT_SLUG}
      -e TF_ROOT
      -e TF_VAR_environment="${CI_ENVIRONMENT_NAME}"
      -e TF_VAR_internal_api_url="${INTERNAL_API_URL}"
      -e TF_VAR_project_url="${CI_ENVIRONMENT_URL}"
      -e TF_VAR_service_container_image
      -e TF_VAR_service_container_port
      -e TF_VAR_service_replicas
      registry.gitlab.com/gitlab-org/terraform-images/stable:latest ./scripts/deploy.sh
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

deploy_development:
  extends:
    - .development
    - .deploy

deploy_staging:
  extends:
    - .staging
    - .deploy

deploy_production:
  extends:
    - .production
    - .deploy

.rollback:
  extends: .deploy
  before_script:
    - export TF_VAR_container_image=${CI_REGISTRY_IMAGE}:${VERSION_BEFORE_REF}

rollback_development:
  extends:
    - .development
    - .rollback
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" && $CI_JOB_TRIGGERED != "true"
      when: manual
      allow_failure: true

rollback_staging:
  extends:
    - .staging
    - .rollback
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_JOB_TRIGGERED != "true"
      when: manual
      allow_failure: true

rollback_production:
  extends:
    - .production
    - .rollback
  rules:
    - if: $CI_COMMIT_TAG && $CI_JOB_TRIGGERED != "true"
      when: manual
      allow_failure: true

.create-version-tag:
  image:
    name: docker:20
  services:
    - docker:20-dind
  stage: Pact-tag

create-version-tag_development:
  extends: .create-version-tag
  rules:
    - if: $PACT_ENABLED == "true" && $PACT_BROKER_BASE_URL && $CI_COMMIT_BRANCH == "develop" && $CI_JOB_TRIGGERED != "true"
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker create-version-tag
      --pacticipant $PACT_CONSUMER_NAME
      --version $VERSION_REF
      --tag "env:development"

create-version-tag_staging:
  extends: .create-version-tag
  rules:
    - if: $PACT_ENABLED == "true" && $PACT_BROKER_BASE_URL && $CI_COMMIT_BRANCH == "master" && $CI_JOB_TRIGGERED != "true"
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker create-version-tag
      --pacticipant $PACT_CONSUMER_NAME
      --version $VERSION_REF
      --tag "env:staging"

create-version-tag_production:
  extends: .create-version-tag
  rules:
    - if: $PACT_ENABLED == "true" && $PACT_BROKER_BASE_URL && $CI_COMMIT_TAG && $CI_JOB_TRIGGERED != "true"
  script:
    - >
      docker run --rm
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME
      pactfoundation/pact-cli:latest-node14 pact-broker create-version-tag
      --pacticipant $PACT_CONSUMER_NAME
      --version $VERSION_REF
      --tag "env:production"

.sentry_deploy_success:
  stage: Sentry
  image: docker:20
  services:
    - docker:20-dind
  script:
    - RELEASE_END=$(date +%s)
    - >
      docker run --rm
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sentry-cli releases deploys $VERSION_REF new -e $SENTRY_ENV -t $((RELEASE_END-RELEASE_START))

sentry_success_development:
  extends: .sentry_deploy_success
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "develop" && $CI_JOB_TRIGGERED != "true"
      when: on_success
      variables:
        SENTRY_ENV: Development

sentry_success_staging:
  extends: .sentry_deploy_success
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "master" && $CI_JOB_TRIGGERED != "true"
      when: on_success
      variables:
        SENTRY_ENV: Staging

sentry_success_production:
  extends: .sentry_deploy_success
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_TAG && $CI_JOB_TRIGGERED != "true"
      when: on_success
      variables:
        SENTRY_ENV: Production

.sentry_deploy_failure:
  stage: Sentry
  image: docker:20
  services:
    - docker:20-dind
  script:
    - >
      docker run --rm
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN
      -e SENTRY_ORG
      -e SENTRY_URL
      getsentry/sentry-cli:latest sentry-cli send-event -m "Deploy to $SENTRY_ENV failed."

sentry_failure_development:
  extends: .sentry_deploy_failure
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "develop" && $CI_JOB_TRIGGERED != "true"
      when: on_failure
      variables:
        SENTRY_ENV: Development

sentry_failure_staging:
  extends: .sentry_deploy_failure
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_BRANCH == "master" && $CI_JOB_TRIGGERED != "true"
      when: on_failure
      variables:
        SENTRY_ENV: Staging

sentry_failure_production:
  extends: .sentry_deploy_failure
  rules:
    - if: $SENTRY_DSN && $CI_COMMIT_TAG && $CI_JOB_TRIGGERED != "true"
      when: on_failure
      variables:
        SENTRY_ENV: Production
