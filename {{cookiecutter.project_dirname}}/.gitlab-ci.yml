image: node:14-slim

stages:
  - Test
  - Report
  - Pact-publish
  - Pact-check
  - Build
  - Deploy
  - Pact-tag

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  PACT_CONSUMER_NAME: {{cookiecutter.project_slug}}-frontend
  VERSION_BEFORE_REF: $CI_COMMIT_BEFORE_SHA
  VERSION_REF: $CI_COMMIT_SHA

cache:
  paths:
    - node_modules/
    - .yarn

test:
  stage: Test
  image: node:14-slim
  before_script:
    - "yarn install"
  script:
    - "yarn test --coverage --color"
    - "yarn pact --coverage --color"
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths:
      - coverage
      - __test__/pacts
      - __test__/logs
    expire_in: 1 day

pages:
  stage: Report
  image: busybox
  script:
    - mv coverage/lcov-report/* public
  artifacts:
    paths:
      - public
  dependencies:
    - test

publish:
  image: pactfoundation/pact-cli:latest-node14
  stage: Pact-publish
  script:
    - "pact-broker publish __test__/pacts --consumer-app-version=$VERSION_REF --tag=all"
  dependencies:
    - test

.can-i-deploy:
  allow_failure: false
  dependencies:
    - publish
  image:
    name: pactfoundation/pact-cli:latest-node14
  stage: Pact-check

can-i-deploy_development:
  extends: .can-i-deploy
  script:
    - pact-broker can-i-deploy --pacticipant $PACT_CONSUMER_NAME --version $VERSION_REF --to development
  only:
    - develop

can-i-deploy_integration:
  extends: .can-i-deploy
  script:
    - pact-broker can-i-deploy --pacticipant $PACT_CONSUMER_NAME --version $VERSION_REF --to integration
  only:
    - master

can-i-deploy_production:
  extends: .can-i-deploy
  script:
    - pact-broker can-i-deploy --pacticipant $PACT_CONSUMER_NAME --version $VERSION_REF --to production
  only:
    - tags

build:
  stage: Build
  image: docker:20
  services:
    - docker:20-dind
  before_script:
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker build -t $CI_REGISTRY/$CI_PROJECT_PATH:$VERSION_REF --pull -f docker/remote.Dockerfile ."
    - "docker push $CI_REGISTRY/$CI_PROJECT_PATH:$VERSION_REF"
  after_script:
    - "docker logout $CI_REGISTRY"
  only:
    - develop
    - master
    - tags

.deploy:
  stage: Deploy
  image:
    name: bitnami/kubectl:1.19
    entrypoint: [""]
  before_script:
    - kubectl config set-cluster my-cluster --server=${KUBE_URL} --certificate-authority="${KUBE_CA_PEM_FILE}"
    - kubectl config set-credentials admin --token=${KUBE_TOKEN}
    - kubectl config set-context my-context --cluster=my-cluster --user=admin --namespace=default
    - kubectl config use-context my-context

deploy_development:
  extends: .deploy
  environment:
    name: development
  script:
    - sed -i "s/__IMAGE_TAG__/$VERSION_REF/" k8s/development/frontend.yaml
    - kubectl apply -f k8s/development/frontend.yaml
  only:
    - develop

deploy_integration:
  extends: .deploy
  environment:
    name: integration
  script:
    - sed -i "s/__IMAGE_TAG__/$VERSION_REF/" k8s/integration/frontend.yaml
    - kubectl apply -f k8s/integration/frontend.yaml
  only:
    - master

deploy_production:
  extends: .deploy
  environment:
    name: production
  script:
    - sed -i "s/__IMAGE_TAG__/$VERSION_REF/" k8s/production/frontend.yaml
    - kubectl apply -f k8s/production/frontend.yaml
  only:
    - tags

rollback_development:
  extends: .deploy
  environment:
    name: development
  script:
    - sed -i "s/__IMAGE_TAG__/$VERSION_BEFORE_REF/" k8s/development/frontend.yaml
    - kubectl apply -f k8s/development/frontend.yaml
  only:
    - develop
  when: manual

rollback_integration:
  extends: .deploy
  environment:
    name: integration
  script:
    - sed -i "s/__IMAGE_TAG__/$VERSION_BEFORE_REF/" k8s/integration/frontend.yaml
    - kubectl apply -f k8s/integration/frontend.yaml
  only:
    - master
  when: manual

rollback_production:
  extends: .deploy
  environment:
    name: production
  script:
    - sed -i "s/__IMAGE_TAG__/$VERSION_BEFORE_REF/" k8s/production/frontend.yaml
    - kubectl apply -f k8s/production/frontend.yaml
  only:
    - tags
  when: manual

.create-version-tag:
  image:
    name: pactfoundation/pact-cli:latest-node14
  stage: Pact-tag
  except:
    - triggers

create-version-tag_features:
  extends: .create-version-tag
  script:
    - pact-broker create-version-tag --pacticipant $PACT_CONSUMER_NAME --version $VERSION_REF --tag "branch:$CI_COMMIT_BRANCH"
  except:
    - develop
    - master
  only:
    - branches

create-version-tag_development:
  extends: .create-version-tag
  script:
    - pact-broker create-version-tag --pacticipant $PACT_CONSUMER_NAME --version $VERSION_REF --tag development --tag "branch:develop"
  only:
    - develop

create-version-tag_integration:
  extends: .create-version-tag
  script:
    - pact-broker create-version-tag --pacticipant $PACT_CONSUMER_NAME --version $VERSION_REF --tag integration --tag "branch:master"
  only:
    - master

create-version-tag_production:
  extends: .create-version-tag
  script:
    - pact-broker create-version-tag --pacticipant $PACT_CONSUMER_NAME --version $VERSION_REF --tag production  --tag "tag:$CI_COMMIT_TAG"
  only:
    - tags
