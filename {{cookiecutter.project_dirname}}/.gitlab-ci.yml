stages:
  - Test
  - Pact-publish
  - Pact-check
  - Build
  - Report
  - E2E
  - Deploy
  - Pact-tag
  - Sentry

variables:
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1
  PACT_CONSUMER_NAME: {{ cookiecutter.project_slug }}-{{ cookiecutter.service_slug }}
  PROJECT_SLUG: {{ cookiecutter.project_slug }}
  SENTRY_PROJECT_NAME: {{ cookiecutter.project_slug }}-{{ cookiecutter.service_slug }}
  VERSION_BEFORE_REF: ${CI_COMMIT_BEFORE_SHA}
  VERSION_REF: ${CI_COMMIT_SHA}

cache:
  paths:
    - node_modules/
{% with env=cookiecutter.resources.envs[0] %}
.development:
  rules: &development-rules
    - &pipeline-push-rule
      if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - &development-rule
      if: $CI_COMMIT_BRANCH == "develop"
      variables:
        ENV_SLUG: {{ env.slug }}
        STACK_SLUG: {{ env.stack_slug }}
        VAULT_ROLE: {{ cookiecutter.service_slug }}-{{ env.slug }}
  environment:
    name: {{ env.name }}{% if env.url %}
    url: {{ env.url }}{% endif %}
{% endwith %}{% with env=cookiecutter.resources.envs[1] %}
.staging:
  rules: &staging-rules
    - <<: *pipeline-push-rule
    - &staging-rule
      if: $CI_COMMIT_BRANCH == "main"
      variables:
        ENV_SLUG: {{ env.slug }}
        STACK_SLUG: {{ env.stack_slug }}
        VAULT_ROLE: {{ cookiecutter.service_slug }}-{{ env.slug }}
  environment:
    name: {{ env.name }}{% if env.url %}
    url: {{ env.url }}{% endif %}
{% endwith %}{% with env=cookiecutter.resources.envs[2] %}
.production:
  rules: &production-rules
    - <<: *pipeline-push-rule
    - &production-rule
      if: $CI_COMMIT_TAG
      variables:
        ENV_SLUG: {{ env.slug }}
        STACK_SLUG: {{ env.stack_slug }}
        VAULT_ROLE: {{ cookiecutter.service_slug }}-{{ env.slug }}
  environment:
    name: {{ env.name }}{% if env.url %}
    url: {{ env.url }}{% endif %}
{% endwith %}

.sentry:
  stage: .pre
  image: docker:20
  services:
    - docker:20-dind{% if cookiecutter.use_vault == "true" %}
  id_tokens:
    VAULT_ID_TOKEN:
      aud: ${VAULT_ADDR}{% endif %}
  script:
    - >
      docker run --rm
      -v ${PWD}:${PWD}
      -w ${PWD}
      -e CI_ENVIRONMENT_NAME{% if cookiecutter.use_vault == "true" %}
      -e ENV_NAME=${CI_ENVIRONMENT_NAME}{% endif %}
      -e PROJECT_DIR=${CI_PROJECT_DIR}
      -e PROJECT_SLUG
      -e RELEASE_END
      -e RELEASE_START{% if cookiecutter.use_vault == "false" %}
      -e SENTRY_AUTH_TOKEN
      -e SENTRY_DSN{% endif %}
      -e SENTRY_ORG
      -e SENTRY_PROJECT_NAME
      -e SENTRY_URL{% if cookiecutter.use_vault == "true" %}
      -e SERVICE_SLUG={{ cookiecutter.service_slug }}
      -e VAULT_ADDR
      -e VAULT_ID_TOKEN
      -e VAULT_ROLE{% endif %}
      -e VERSION_REF
      --entrypoint=""
      getsentry/sentry-cli:latest ./scripts/ci_sentry.sh ${SENTRY_CMD}

.sentry_release:
  extends:
    - .sentry
  variables:
    SENTRY_CMD: release
  before_script:
    - RELEASE_START=$(date +%s)

sentry_release_development:
  extends:
    - .development
    - .sentry_release
  rules:
    - &sentry-rule
      if: $SENTRY_ENABLED != "true"
      when: never
    - *development-rules

sentry_release_staging:
  extends:
    - .staging
    - .sentry_release
  rules:
    - <<: *sentry-rule
    - *staging-rules

sentry_release_production:
  extends:
    - .production
    - .sentry_release
  rules:
    - <<: *sentry-rule
    - *production-rules

test:
  stage: Test
  image: docker:20
  services:
    - docker:20-dind
  needs: []
  variables:
    COMPOSE_FILE: docker-compose.yaml:docker-compose/test.yaml
    COMPOSE_PROJECT_NAME: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}"
    SERVICE_CONTAINER_NAME: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}_frontend"
    SERVICE_DOCKER_FILE: "docker/test.Dockerfile"
    SERVICE_IMAGE_NAME: "gitlabci_{{ cookiecutter.project_slug }}_{{ cookiecutter.service_slug }}"
    SERVICE_IMAGE_TAG: "${CI_JOB_NAME}-${CI_JOB_ID}"
  before_script:
    - mkdir pacts
  script:
    - docker-compose build --quiet consumer
    - docker-compose run --name ${SERVICE_CONTAINER_NAME} consumer
  after_script:
    - docker cp ${SERVICE_CONTAINER_NAME}:/app/coverage .
    - docker cp ${SERVICE_CONTAINER_NAME}:/app/pacts .
    - docker-compose down --volumes --remove-orphans
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths:
      - coverage
      - pacts
    reports:
      junit:
      - junit.xml
    expire_in: 1 day

.pact:
  image:
    name: docker:20
  services:
    - docker:20-dind{% if cookiecutter.use_vault == "true" %}
  id_tokens:
    VAULT_ID_TOKEN:
      aud: ${VAULT_ADDR}{% endif %}
  script:
    - >
      docker run --rm
      -v ${PWD}:${PWD}
      -w ${PWD}{% if cookiecutter.use_vault == "true" %}
      -e ENV_SLUG{% else %}
      -e PACT_BROKER_BASE_URL
      -e PACT_BROKER_PASSWORD
      -e PACT_BROKER_USERNAME{% endif %}
      -e PROJECT_SLUG{% if cookiecutter.use_vault == "true" %}
      -e VAULT_ADDR
      -e VAULT_ID_TOKEN{% endif %}
      --entrypoint=""
      pactfoundation/pact-cli:latest-node14 ./scripts/ci_pact.sh ${PACT_CMD}

publish:
  extends:
    - .pact
  stage: Pact-publish
  needs: ["test"]
  rules:
    - &skip-pact-rule
      if: $PACT_ENABLED != "true"
      when: never
    - &push-only
      if: $CI_PIPELINE_SOURCE != "push"
      when: never
    - when: always
  before_script:
    - if [ "${CI_COMMIT_BRANCH}" ]; then PACT_CONSUMER_TAG="branch:${CI_COMMIT_BRANCH}"; else PACT_CONSUMER_TAG="tag:${CI_COMMIT_TAG}"; fi
    - >
      export PACT_CMD="publish ./pacts
      --consumer-app-version=${VERSION_REF}
      --tag=${PACT_CONSUMER_TAG}"

pages:
  stage: Report
  image: busybox
  needs: ["test"]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - mv coverage/tests/lcov-report/* public
  artifacts:
    paths:
      - public

.can-i-deploy:
  extends:
    - .pact
  stage: Pact-check
  allow_failure: false
  before_script:
    - >
      export PACT_CMD="can-i-deploy
      --pacticipant ${PACT_CONSUMER_NAME}
      --version ${VERSION_REF}
      --to env:${ENV_SLUG}"

can-i-deploy_development:
  extends:
    - .development
    - .can-i-deploy
  needs: ["publish"]
  rules:
    - <<: *skip-pact-rule
    - <<: *push-only
    - *development-rules

can-i-deploy_staging:
  extends:
    - .staging
    - .can-i-deploy
  needs: ["publish"]
  rules:
    - <<: *skip-pact-rule
    - <<: *push-only
    - *staging-rules

can-i-deploy_production:
  extends:
    - .production
    - .can-i-deploy
  needs: ["publish"]
  rules:
    - <<: *skip-pact-rule
    - <<: *push-only
    - *production-rules

.build:
  stage: Build
  image: docker:20
  services:
    - docker:20-dind
  before_script:
    - export DOCKER_CONFIG=${PWD}/.dockerconfig
    - docker login --username "${CI_REGISTRY_USER}" --password "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - >
      docker build
      --tag=${CI_REGISTRY}/${CI_PROJECT_PATH}:${VERSION_REF}
      --file=docker/remote.Dockerfile
      --target=remote
      --pull .
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:${VERSION_REF}
  after_script:
    - docker logout ${CI_REGISTRY}

build_development:
  extends:
    - .development
    - .build
  needs:
    - job: can-i-deploy_development
      optional: true
    - job: test

build_staging:
  extends:
    - .staging
    - .build
  needs:
    - job: can-i-deploy_staging
      optional: true
    - job: test

build_production:
  extends:
    - .production
    - .build
  needs:
    - job: can-i-deploy_production
      optional: true
    - job: test

.e2e:
  stage: E2E
  image: docker:20
  services:
    - docker:20-dind
  variables:
    COMPOSE_PROJECT_NAME: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}"
    SERVICE_CONTAINER_NAME: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}_e2e"
  before_script:
    - if [ "${PACT_ENABLED}" == "true" ]; then COMPOSE_PROFILES=pact; else COMPOSE_PROFILES=no-pact; fi
    - export COMPOSE_PROFILES
    - export CONSUMER_IMAGE=${CI_REGISTRY}/${CI_PROJECT_PATH}:${VERSION_REF}
    - docker login --username "${CI_REGISTRY_USER}" --password "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - docker-compose build --quiet consumer
    - docker-compose up -d proxy
    - docker-compose run --name ${SERVICE_CONTAINER_NAME} cypress
  after_script:
    - docker cp ${SERVICE_CONTAINER_NAME}:/app/cypress-outputs ./screenshots
    - docker-compose down --volumes --remove-orphans
    - docker logout ${CI_REGISTRY}
  artifacts:
    paths:
      - screenshots
    expire_in: 1 day

e2e_development:
  extends:
    - .development
    - .e2e
  needs: ["test", "build_development"]
  rules:
    - &skip-e2e-rule
      if: $SKIP_E2E == "true"
      when: never
    - <<: *push-only
    - *development-rules

e2e_staging:
  extends:
    - .staging
    - .e2e
  needs: ["test", "build_staging"]
  rules:
    - <<: *skip-e2e-rule
    - <<: *push-only
    - *staging-rules

e2e_production:
  extends:
    - .production
    - .e2e
  needs: ["test", "build_production"]
  rules:
    - <<: *skip-e2e-rule
    - <<: *push-only
    - *production-rules

e2e_manual:
  rules:
    - <<: *skip-e2e-rule
    - <<: *push-only
    - if: $CI_COMMIT_REF_PROTECTED == "true"
      when: never
    - when: manual
  extends:
    - .e2e
  variables:
    NEXT_PUBLIC_PROJECT_URL: 'https://proxy:8443'
    REACT_ENVIRONMENT: 'production'
    SERVICE_DOCKER_FILE: "docker/remote.Dockerfile"
    COMPOSE_FILE: docker-compose.yaml:docker-compose/e2e.yaml:docker-compose/e2e-branch.yaml
  needs: ["test"]

.deploy:
  stage: Deploy
  image:
    name: docker:20
  services:
    - docker:20-dind{% if cookiecutter.use_vault == "true" %}
  id_tokens:
    VAULT_ID_TOKEN:
      aud: ${VAULT_ADDR}{% endif %}
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/terraform/{{ cookiecutter.deployment_type }}
  before_script:
    - export TF_VAR_service_container_image=${CI_REGISTRY_IMAGE}:${VERSION_REF}
  script:
    - >
      docker run --rm
      -u `id -u`
      -v ${PWD}:${PWD}
      -w ${PWD}{% if cookiecutter.terraform_backend == "gitlab" %}
      -e CI_API_V4_URL
      -e CI_COMMIT_SHA
      -e CI_JOB_ID
      -e CI_JOB_STAGE
      -e CI_JOB_TOKEN
      -e CI_PROJECT_ID
      -e CI_PROJECT_NAME
      -e CI_PROJECT_NAMESPACE
      -e CI_PROJECT_PATH
      -e CI_PROJECT_URL{% endif %}
      -e ENV_SLUG
      -e PROJECT_DIR=${CI_PROJECT_DIR}
      -e PROJECT_SLUG
      -e STACK_SLUG
      -e TERRAFORM_BACKEND={{ cookiecutter.terraform_backend }}
      -e TERRAFORM_EXTRA_VAR_FILE=${ENV_SLUG}.tfvars
      -e TERRAFORM_VARS_DIR=${CI_PROJECT_DIR}/terraform/vars
      -e TF_ROOT{% if cookiecutter.terraform_backend == "gitlab" %}
      -e TF_STATE_NAME="env_${ENV_SLUG}"{% endif %}{% if cookiecutter.use_vault == "false" %}{% if cookiecutter.deployment_type == "digitalocean-k8s" %}
      -e TF_VAR_digitalocean_token="${DIGITALOCEAN_TOKEN}"{% endif %}
      -e TF_VAR_internal_backend_url="${INTERNAL_BACKEND_URL}"
      -e TF_VAR_internal_service_port="${FRONTEND_SERVICE_PORT}"{% if cookiecutter.deployment_type == "other-k8s" %}
      -e TF_VAR_kubernetes_cluster_ca_certificate="${KUBERNETES_CLUSTER_CA_CERTIFICATE}"
      -e TF_VAR_kubernetes_host="${KUBERNETES_HOST}"
      -e TF_VAR_kubernetes_token="${KUBERNETES_TOKEN}"{% endif %}
      -e TF_VAR_project_url="${CI_ENVIRONMENT_URL}"
      -e TF_VAR_sentry_dsn="${SENTRY_DSN}"{% endif %}
      -e TF_VAR_service_container_image{% if cookiecutter.terraform_backend != "gitlab" %}
      -e TF_WORKSPACE="{{ cookiecutter.project_slug }}_{{ cookiecutter.service_slug }}_environment_${ENV_SLUG}"{% endif %}{% if cookiecutter.terraform_backend == "terraform-cloud" and not cookiecutter.use_vault %}
      -e TFC_TOKEN{% endif %}{% if cookiecutter.use_vault == "true" %}
      -e VAULT_ADDR
      -e VAULT_ID_TOKEN
      -e VAULT_ROLE
      -e VAULT_SECRETS="digitalocean k8s {{ cookiecutter.service_slug }}/extra {{ cookiecutter.service_slug }}/sentry"
      -e VAULT_SECRETS_PREFIX="envs/${CI_ENVIRONMENT_NAME}"
      -e VAULT_VERSION{% endif %}
      registry.gitlab.com/gitlab-org/terraform-images/stable:latest ./scripts/deploy.sh
  artifacts:
    name: plan
    reports:
      terraform: ${TF_ROOT}/plan.json

deploy_development:
  extends:
    - .development
    - .deploy
  needs:
  - job: e2e_development
    optional: true
  - job: build_development

deploy_staging:
  extends:
    - .staging
    - .deploy
  needs:
  - job: e2e_staging
    optional: true
  - job: build_staging

deploy_production:
  extends:
    - .production
    - .deploy
  needs:
  - job: e2e_production
    optional: true
  - job: build_production

.rollback:
  extends:
    - .deploy
  before_script:
    - export TF_VAR_service_container_image=${CI_REGISTRY_IMAGE}:${VERSION_BEFORE_REF}

rollback_development:
  extends:
    - .development
    - .rollback
  needs: ["deploy_development"]
  rules:
    - <<: *pipeline-push-rule
    - <<: *development-rule
      when: manual
      allow_failure: true

rollback_staging:
  extends:
    - .staging
    - .rollback
  needs: ["deploy_staging"]
  rules:
    - <<: *pipeline-push-rule
    - <<: *staging-rule
      when: manual
      allow_failure: true

rollback_production:
  extends:
    - .production
    - .rollback
  needs: ["deploy_production"]
  rules:
    - <<: *pipeline-push-rule
    - <<: *production-rule
      when: manual
      allow_failure: true

.create-version-tag:
  extends:
    - .pact
  stage: Pact-tag
  before_script:
    - >
      export PACT_CMD="create-version-tag
      --pacticipant ${PACT_CONSUMER_NAME}
      --version ${VERSION_REF}
      --tag env:${ENV_SLUG}"

create-version-tag_development:
  extends: .create-version-tag
  needs: ["deploy_development"]
  rules:
    - <<: *skip-pact-rule
    - <<: *push-only
    - *development-rules

create-version-tag_staging:
  extends: .create-version-tag
  needs: ["deploy_staging"]
  rules:
    - <<: *skip-pact-rule
    - <<: *push-only
    - *staging-rules

create-version-tag_production:
  extends: .create-version-tag
  needs: ["deploy_production"]
  rules:
    - <<: *skip-pact-rule
    - <<: *push-only
    - *production-rules

.sentry_deploy_success:
  extends:
    - .sentry
  variables:
    SENTRY_CMD: success
  stage: Sentry
  before_script:
    - RELEASE_END=$(date +%s)

sentry_success_development:
  extends:
    - .development
    - .sentry_deploy_success
  needs: ["deploy_development"]
  rules:
    - <<: *sentry-rule
    - <<: *push-only
    - <<: *development-rule
      when: on_success

sentry_success_staging:
  extends:
    - .staging
    - .sentry_deploy_success
  needs: ["deploy_staging"]
  rules:
    - <<: *sentry-rule
    - <<: *push-only
    - <<: *staging-rule
      when: on_success

sentry_success_production:
  extends:
    - .production
    - .sentry_deploy_success
  needs: ["deploy_production"]
  rules:
    - <<: *sentry-rule
    - <<: *push-only
    - <<: *production-rule
      when: on_success

.sentry_deploy_failure:
  extends:
    - .sentry
  variables:
    SENTRY_CMD: failure
  stage: Sentry

sentry_failure_development:
  extends:
    - .development
    - .sentry_deploy_failure
  rules:
    - <<: *sentry-rule
    - <<: *push-only
    - <<: *development-rule
      when: on_failure

sentry_failure_staging:
  extends:
    - .staging
    - .sentry_deploy_failure
  rules:
    - <<: *sentry-rule
    - <<: *push-only
    - <<: *staging-rule
      when: on_failure

sentry_failure_production:
  extends:
    - .production
    - .sentry_deploy_failure
  rules:
    - <<: *sentry-rule
    - <<: *push-only
    - <<: *production-rule
      when: on_failure
